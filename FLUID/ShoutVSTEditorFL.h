// generated by Fast Light User Interface Designer (fluid) version 1.0304

#ifndef ShoutVSTEditorFL_h
#define ShoutVSTEditorFL_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "comp_definitions.h"
#include <FL/filename.H>
#include "../version.h"
#include <FL/Fl_Button.H>
#include <FL/Fl_Text_Display.H>
#include <string>
using std::string;
#include <functional>
#include <FL/Fl_Group.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Text_Editor.H>

class ShoutVSTEditorFL {
public:
  ShoutVSTEditorFL();
private:
  Fl_Double_Window *about_window;
  inline void cb_OK_i(Fl_Button*, void*);
  static void cb_OK(Fl_Button*, void*);
  inline void cb_Source_i(Fl_Button*, void*);
  static void cb_Source(Fl_Button*, void*);
public:
  Fl_Double_Window *fl_window;
private:
  Fl_Group *group_connection;
  Fl_Input *connection_hostname;
  Fl_Input *connection_port;
  Fl_Input *connection_username;
  Fl_Input *connection_password;
  Fl_Input *connection_mountpoint;
  Fl_Round_Button *proto_http;
  Fl_Round_Button *proto_xaudiocast;
  Fl_Round_Button *proto_icy;
  Fl_Round_Button *proto_roaraudio;
  Fl_Group *group_encoding;
  Fl_Input *encoding_bitrate;
  Fl_Input *encoding_samplerate;
  Fl_Round_Button *radio_mp3;
  Fl_Round_Button *radio_ogg;
  Fl_Group *group_stream;
  Fl_Input *stream_name;
  Fl_Input *stream_url;
  Fl_Input *stream_genre;
  Fl_Input *stream_artist;
  Fl_Input *stream_title;
  Fl_Text_Editor *stream_description;
  Fl_Button *button_connect;
  inline void cb_button_connect_i(Fl_Button*, void*);
  static void cb_button_connect(Fl_Button*, void*);
  Fl_Button *button_disconnect;
  inline void cb_button_disconnect_i(Fl_Button*, void*);
  static void cb_button_disconnect(Fl_Button*, void*);
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  Fl_Text_Editor *stream_metadata;
  inline void cb_Send_i(Fl_Button*, void*);
  static void cb_Send(Fl_Button*, void*);
public:
  bool show();
  void hide();
  string getEncodingFormat();
  string getHostName();
  string getPort();
  string getUserName();
  string getPassword();
  string getMountPoint();
  string getBitRate();
  string getSampleRate();
  string getStreamName();
  string getStreamURL();
  string getStreamGenre();
  string getStreamArtist();
  string getStreamTitle();
  string getStreamDescription();
  string getStreamMetaData();
  string getProtocol();
  std::function<void()> connectCallback; 
  std::function<void()> disconnectCallback; 
  std::function<void()> metadataCallback; 
private:
  Fl_Text_Buffer *buffer_about; 
public:
  void setDisable(bool disable);
  void showAbout();
  void closeAbout();
  ~ShoutVSTEditorFL();
};
#endif
